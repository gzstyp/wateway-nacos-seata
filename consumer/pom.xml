<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>wateway-nacos-seata</artifactId>
        <groupId>com.fwtai</groupId>
        <version>v1.0.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>consumer</artifactId>

    <description>
        本项目是服务消费者,已整合Feign且已整合Sentinel,若不需要的话，把相关的配置删除即可

        Sentinel 控制台提供一个轻量级的控制台，它提供机器发现、单机资源实时监控、集群资源汇总，以及规则管理的功能。您只需要对应用进行简单的配置，就可以使用这些功能。
        注意: 集群资源汇总仅支持 500 台以下的应用集群，有大概 1 - 2 秒的延时。如果想支持更多的集群，那就部署两个Sentinel喽

        Feign 是一个声明式的伪 Http 客户端，它使得写 Http 客户端变得更简单。
        使用 Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用 Feign 注解和 JAX-RS 注解。
        Feign 支持可插拔的编码器和解码器。Feign 默认集成了 Ribbon，Nacos 也很好的兼容了 Feign，默认实现了负载均衡的效果

        Feign 采用的是基于接口的注解
        Feign 整合了 ribbon

        通过在启动类 @EnableFeignClients 注解开启 Feign 功能,再通过 (at)FeignClient("服务名") 注解来指定调用哪个服务,达到 负载均衡

        Feign 中使用 Sentinel,
        在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 RPC 相互调用，
        在 Spring Cloud 中可以用 RestTemplate + LoadBalanceClient 和 Feign 来调用。
        为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，
        如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet 容器的线程资源会被消耗完毕，导致服务瘫痪。
        服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 “雪崩” 效应。

        随着微服务的流行，服务和服务之间的稳定性变得越来越重要。
        Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。

        熔断(Sentinel)
        Sentinel 控制台提供一个轻量级的控制台，它提供机器发现、单机资源实时监控、集群资源汇总，以及规则管理的功能。

        feign:
        　sentinel:
        　　enabled: true

        如果8080端口冲突请修改-Dserver.port=自定义端口号

    </description>

    <url>http://www.fwtai.com</url>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Begin -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Spring Boot End -->

        <!-- Spring Cloud Begin -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <!--
            Feign 中使用 Sentinel，Sentinel 适配了 Feign 组件。
            但默认是关闭的。需要在配置文件中配置打开它，在配置文件增加 feign.sentinel.enabled=true
            在 Service 中@FeignClient注解增加 fallback属性用来指定类
        -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        <!-- Spring Cloud End -->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.fwtai.Consumer</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
